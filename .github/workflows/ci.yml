name: CI / Build & Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: testdb
          MYSQL_USER: appuser
          MYSQL_PASSWORD: AppPass123!
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/shehab-${{ matrix.service }}-algotask:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/shehab-${{ matrix.service }}-algotask:${{ github.sha }}

      - name: Smoke-test backend
        if: matrix.service == 'backend'
        env:
          DB_HOST: 127.0.0.1
          DB_USER: appuser
          DB_PASS: AppPass123!
          DB_NAME: testdb
        run: |
          # run the backend container on host network so it sees our MySQL service
          docker run -d --name backend-test --network host \
            -e DB_HOST=$DB_HOST \
            -e DB_USER=$DB_USER \
            -e DB_PASS=$DB_PASS \
            -e DB_NAME=$DB_NAME \
            -p 5000:5000 \
            ${{ secrets.DOCKERHUB_USERNAME }}/shehab-backend-algotask:${{ github.sha }}

          # wait up to ~30s for it to respond
          for i in {1..10}; do
            if curl --fail http://localhost:5000/api/data; then
              echo "✅ backend is up!"
              break
            fi
            echo "waiting for backend… ($i)"
            sleep 3
          done

          # dump logs for debugging
          echo "=== backend container logs ==="
          docker logs backend-test || true
          docker rm -f backend-test
